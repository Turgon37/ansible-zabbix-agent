---

- name: Check userparameter prerequisites
  assert:
    that:
      - zabbix_agent__userparameter is defined
      - zabbix_agent__userparameter.name is defined and ' ' not in zabbix_agent__userparameter.name
      - >-
        zabbix_agent__userparameter.state|d('present') == 'absent' or
        zabbix_agent__userparameter.userparameters|d([])|length > 0
    msg: >-
      zabbix_agent__userparameter must be defined with specifications,
      zabbix_agent__userparameter.name must contains the name of the file without any spaces and
      zabbix_agent__userparameter.userparameters must contains at least one item
  tags: ['zabbix-agent', 'zabbix-agent-userparameter']

- name: Filter characters in user parameter name
  set_fact:
    _zabbix_agent__userparameter_file_path: "{{ zabbix_agent__userparameters_directory }}/{{ zabbix_agent__userparameter.name|lower|regex_replace('[^a-z0-9_-]', '_') }}.conf"
  tags: ['zabbix-agent', 'zabbix-agent-userparameter']

# Ensure required folder before the full zabbix-agent role is applied

- name: Ensure userparameters directories exists
  file:
    path:  '{{ item }}'
    state: directory
  with_items:
    - '{{ zabbix_agent__userparameters_directory }}'
    - '{{ zabbix_agent__userparameters_conf_directory }}'
  register: _zabbix_agent__userparameter_directory
  notify: [ 'restart-zabbix-agent' ]
  tags: ['zabbix-agent', 'zabbix-agent-userparameter']

- name: Ensure temporary full permissions on newly created folder
  file:
    path: '{{ item.item }}'
    mode: 0755
    state: directory
  with_items: '{{ _zabbix_agent__userparameter_directory.results }}'
  when: item is changed
  tags: ['zabbix-agent', 'zabbix-agent-userparameter']

# SUDO rules

- name: Configure sudoers rights for zabbix-agent
  lineinfile:
    path: /etc/sudoers
    regexp: "^{{ zabbix_agent__service_user }} ALL=.*{{ item.command.split(' ')[0] if '$' in item.command else item.command }}"
    line: "{{ zabbix_agent__service_user }} ALL=({{ item.sudo_user|d('ALL') }}:{{ item.sudo_group|d('ALL') }}) NOPASSWD:{{ item.command.split(' ')[0] if '$' in item.command else item.command }}"
    validate: 'visudo -cf %s'
    state: "{{ zabbix_agent__userparameter.state|d('present') }}"
  with_items: '{{ zabbix_agent__userparameter.userparameters|d([]) }}'
  when: not zabbix_agent__sudo_use_sudoers_role|bool and item.sudo|d(False)|bool
  tags: ['zabbix-agent', 'zabbix-agent-userparameter']

- name: Configure sudoers rights for zabbix-agent
  include_role:
    name: sudoers
    tasks_from: types/sudo_rule
  vars:
    sudoers__sudo_rule:
      name: 'zabbix_agent__10_{{ zabbix_agent__userparameter.name }}'
      remove_using_regexp:
        - 'zabbix_agent__?10_{{ zabbix_agent__userparameter.name }}_[0-9]+'
        - 'zabbix_agent_10_{{ zabbix_agent__userparameter.name }}'
      force_remove_using_regexp: true
      users: '{{ zabbix_agent__service_user }}'
      hosts: ALL
      comment: Autogenerated rule for zabbix agent
      commands: >
        {%- set _sudo_rules = [] -%}
        {%- for userparam in zabbix_agent__userparameter.userparameters|d([])|list if userparam.sudo|d(False)|bool-%}
        {%-    set _ = _sudo_rules.append({
          'commands': userparam.sudo_command
                        |d(userparam.command.split(' ')[0]
                          if '$' in userparam.command
                          else userparam.command),
          'run_as_user': userparam.sudo_user|d(omit),
          'run_as_group': userparam.sudo_group|d(omit),
          'tags': 'NOPASSWD'}) -%}
        {%- endfor -%}
        {{ _sudo_rules }}
      defaults:
        - defaults: '!requiretty'
          user: '{{ zabbix_agent__service_user }}'
      state: >-
        {{ 'absent'
            if true not in zabbix_agent__userparameter.userparameters
                            |map(attribute='sudo')
                            |reject('undefined')
                            |unique
                            |list
            else (zabbix_agent__userparameter.state|d('present')) }}
  when: zabbix_agent__sudo_use_sudoers_role|bool
  tags: ['zabbix-agent', 'zabbix-agent-userparameter']

# ZABBIX

- name: Test if user parameter exists
  stat:
    path: '{{ _zabbix_agent__userparameter_file_path }}'
  register: _zabbix_agent__userparameter_file_stat
  tags: ['zabbix-agent', 'zabbix-agent-userparameter']

- name: Ensure temporary permissions on user parameters file
  file:
    path: '{{ _zabbix_agent__userparameter_file_path }}'
    mode: 0644
    state: touch
  when: zabbix_agent__userparameter.state|d('present') == 'present' and not _zabbix_agent__userparameter_file_stat.stat.exists
  tags: ['zabbix-agent', 'zabbix-agent-userparameter']

- name: 'Create userparameter {{ zabbix_agent__userparameter.name }}'
  template:
    src: user_parameter.j2
    dest: '{{ _zabbix_agent__userparameter_file_path }}'
  when: zabbix_agent__userparameter.state|d('present') == 'present'
  register: _zabbix_agent__userparameter_template
  notify: ['restart-zabbix-agent']
  tags: ['zabbix-agent', 'zabbix-agent-userparameter']

- name: 'Remove userparameter {{ zabbix_agent__userparameter.name }} if needed'
  file:
    path: '{{ _zabbix_agent__userparameter_file_path }}'
    state: absent
  when: zabbix_agent__userparameter.state|d('present') != 'present'
  notify: ['restart-zabbix-agent']
  tags: ['zabbix-agent', 'zabbix-agent-userparameter']
