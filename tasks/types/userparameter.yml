---

- name: Check userparameter prerequisites
  assert:
    that:
      - zabbix_agent__userparameter is defined
      - zabbix_agent__userparameter.userparameters|d([])|length > 0
    msg: zabbix_agent__userparameter must be defined with specifications, zabbix_agent__userparameter.userparameters must contains at least one item
  tags: ['zabbix-agent', 'zabbix-agent-userparameter']

- name: Filter characters in user parameter name
  set_fact:
    _zabbix_agent__userparameter_file_path: "{{ zabbix_agent__userparameters_directory }}/{{ zabbix_agent__userparameter.name|lower|regex_replace('[^a-z0-9_-]', '_') }}.conf"
  tags: ['zabbix-agent', 'zabbix-agent-userparameter']

# Ensure required folder before the full zabbix-agent role is applied

- name: Ensure userparameters directories exists
  file:
    path:  '{{ item }}'
    state: directory
  with_items:
    - '{{ zabbix_agent__userparameters_directory }}'
    - '{{ zabbix_agent__userparameters_conf_directory }}'
  register: _zabbix_agent__userparameter_directory
  notify: [ 'restart-zabbix-agent' ]
  tags: ['zabbix-agent', 'zabbix-agent-userparameter']

- name: Ensure temporary full permissions on newly created folder
  file:
    path:  '{{ item.item }}'
    mode:  0755
    state: directory
  with_items: '{{ _zabbix_agent__userparameter_directory.results }}'
  when: item is changed
  tags: ['zabbix-agent', 'zabbix-agent-userparameter']

# SUDO rules

- name: Configure sudoers rights for zabbix-agent
  lineinfile:
    path:     /etc/sudoers
    regexp:   "^{{ zabbix_agent__service_user }} ALL=.*{{ item.command.split(' ')[0] if '$' in item.command else item.command }}"
    line:     "{{ zabbix_agent__service_user }} ALL=({{ item.sudo_user|d('ALL') }}:{{ item.sudo_group|d('ALL') }}) NOPASSWD:{{ item.command.split(' ')[0] if '$' in item.command else item.command }}"
    validate: 'visudo -cf %s'
    state:    "{{ zabbix_agent__userparameter.state|d('present') }}"
  with_items: '{{ zabbix_agent__userparameter.userparameters|d([]) }}'
  when: not zabbix_agent__sudo_use_sudoers_role|bool and item.sudo|d(False)|bool
  tags: ['zabbix-agent', 'zabbix-agent-userparameter']

- name: Configure sudoers rights for zabbix-agent
  include_role:
    name: sudoers
    tasks_from: sudo_rule
  vars:
    sudoers__sudo_rule:
      name:    'zabbix_agent_10_{{ zabbix_agent__userparameter.name }}_{{ item.0 }}'
      users:   '{{ zabbix_agent__service_user }}'
      hosts:   ALL
      comment: Autogenerated rule for zabbix agent
      commands:
        - commands:     "{{ item.1.command.split(' ')[0] if '$' in item.1.command else item.1.command }}"
          run_as_user:  "{{ item.1.sudo_user|d('ALL') }}"
          run_as_group: "{{ item.1.sudo_group|d('ALL') }}"
          tags: NOPASSWD
      defaults:
        - defaults: '!requiretty'
          user: '{{ zabbix_agent__service_user }}'
      state: "{{ zabbix_agent__userparameter.state|d('present') }}"
  with_indexed_items: '{{ zabbix_agent__userparameter.userparameters|d([]) }}'
  when: zabbix_agent__sudo_use_sudoers_role|bool and item.1.sudo|d(False)|bool
  tags: ['zabbix-agent', 'zabbix-agent-userparameter']

# ZABBIX

- name: Test if user parameter exists
  stat:
    path: '{{ _zabbix_agent__userparameter_file_path }}'
  register: _zabbix_agent__userparameter_file_stat
  tags: ['zabbix-agent', 'zabbix-agent-userparameter']

- name: Ensure temporary permissions on user parameters file
  file:
    path:  '{{ _zabbix_agent__userparameter_file_path }}'
    mode:  0644
    state: touch
  when: zabbix_agent__userparameter.state|d('present') == 'present' and not _zabbix_agent__userparameter_file_stat.stat.exists
  tags: ['zabbix-agent', 'zabbix-agent-userparameter']

- name: 'Create userparameter {{ zabbix_agent__userparameter.name }}'
  template:
    src:  userparameter.j2
    dest: '{{ _zabbix_agent__userparameter_file_path }}'
  when: zabbix_agent__userparameter.state|d('present') == 'present'
  register: _zabbix_agent__userparameter_template
  notify: [ 'restart-zabbix-agent' ]
  tags: ['zabbix-agent', 'zabbix-agent-userparameter']

- name: 'Remove userparameter {{ zabbix_agent__userparameter.name }} if needed'
  file:
    path:  "{{ zabbix_agent__userparameters_directory }}/{{ zabbix_agent__userparameter.name|lower|regex_replace('[^a-z0-9_-]', '_') }}.conf"
    state: absent
  when: zabbix_agent__userparameter.state|d('present') != 'present'
  notify: [ 'restart-zabbix-agent' ]
  tags: ['zabbix-agent', 'zabbix-agent-userparameter']
