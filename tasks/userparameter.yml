---

- name: Check userparameter prerequisites
  assert:
    that:
      - zabbix_agent__userparameter is defined
      - zabbix_agent__userparameter.userparameters|d([])|length > 0
    msg: zabbix_agent__userparameter must be defined with specifications, zabbix_agent__userparameter.userparameters must contains at least one item

- name: Ensure userparameters directory exists
  file:
    path:  '{{ zabbix_agent__userparameters_directory }}'
    mode:  0750
    state: directory
  notify: [ 'restart-zabbix-agent' ]

# SUDO
- name: Configure sudoers rights for zabbix-agent
  lineinfile:
    path:     /etc/sudoers
    regexp:   '^{{ zabbix_agent__service_user }} ALL=.*{{ item.command }}'
    line:     "{{ zabbix_agent__service_user }} ALL=({{ item.sudo_user|d('ALL') }}:{{ item.sudo_group|d('ALL') }}) NOPASSWD:{{ item.command }}"
    validate: 'visudo -cf %s'
    state:    "{{ zabbix_agent__userparameter.state|d('present') }}"
  with_items: '{{ zabbix_agent__userparameter.userparameters|d([]) }}'
  when: not zabbix_agent__sudo_use_sudoers_role|bool and item.sudo|d(False)|bool

- name: Configure sudoers rights for zabbix-agent
  include_role:
    name: sudoers
    tasks_from: sudo_rule
  vars:
    sudoers__sudo_rule:
      name:    'zabbix_agent_10_{{ zabbix_agent__userparameter.name }}_{{ item.0 }}'
      users:   '{{ zabbix_agent__service_user }}'
      hosts:   ALL
      comment: 'Autogenerated rule for zabbix agent from role {{ role_path|basename }}'
      commands:
        - commands: '{{ item.1.command }}'
          run_as_user:  "{{ item.1.sudo_user|d('ALL') }}"
          run_as_group: "{{ item.1.sudo_group|d('ALL') }}"
          tags: NOPASSWD
      defaults:
        - defaults: '!requiretty'
          user: '{{ zabbix_agent__service_user }}'
      state: "{{ zabbix_agent__userparameter.state|d('present') }}"
  with_indexed_items: '{{ zabbix_agent__userparameter.userparameters|d([]) }}'
  when: zabbix_agent__sudo_use_sudoers_role|bool and item.1.sudo|d(False)|bool

# ZABBIX
- name: 'Create userparameter {{ zabbix_agent__userparameter.name }}'
  template:
    src:  userparameter.j2
    dest: '{{ zabbix_agent__userparameters_directory }}/{{ zabbix_agent__userparameter.name }}.conf'
    mode: 0640
  when: zabbix_agent__userparameter.state|d('present') == 'present'
  notify: [ 'restart-zabbix-agent' ]

- name: 'Remove userparameter {{ zabbix_agent__userparameter.name }}'
  file:
    path:  '{{ zabbix_agent__userparameters_directory }}/{{ zabbix_agent__userparameter.name }}.conf'
    state: absent
  when: zabbix_agent__userparameter.state|d('present') != 'present'
  notify: [ 'restart-zabbix-agent' ]
