---

- name: Install block device discovery script file
  copy:
    src:   devices.discovery.py
    dest:  "{{ zabbix_agent__custom_scripts_directory|d('/opt/zabbix-agent-scripts') }}/common_devices_discovery.py"
    owner: root
    group: root
    mode:  0755

- name: Add userparameters tools
  include_tasks: types/user_parameter.yml
  vars:
    zabbix_agent__userparameter:
      name: utils
      userparameters:
        - key: utils.curl[*]
          command: >
            curl $3 --silent --write-out '|%{http_code}' "$1"
            | tr -d '\n'
            | awk -F'|'
            'function in_array(it, arr, x, y) { for (x in arr) y[arr[x]]; return it in y }
            BEGIN{  codes="$2"; if ( length(codes) == 0 ) { codes="200" }; split(codes, http_codes, " ");  }
            {  if ( in_array($$2, http_codes) ) { print $$1 }  }'
          comment: $1 the url, $2 optional space separated list of success http codes, $3 optionnal parameter to pass to curl command
      state: present

- name: Add common userparameters
  include_tasks: types/user_parameter.yml
  vars:
    zabbix_agent__userparameter:
      name: common
      userparameters:
        - key: common.conntrack.count
          command: /bin/bash -c "if [ -f /proc/net/ip_conntrack ]; then wc -l < /proc/net/ip_conntrack; else echo -n 0; fi"
          comment: 'fetch current conntrack size'
        - key: common.conntrack.max
          command: /bin/bash -c "VALUE=$(/sbin/sysctl net.ipv4.netfilter.ip_conntrack_max --ignore | awk '{print $3}'); echo ${VALUE:-0}"
          comment: 'fetch maximum size of conntrack'
        - key: common.disk.discovery
          command: >
            {{ zabbix_agent__custom_scripts_directory|d('/opt/zabbix-agent-scripts') }}/common_devices_discovery.py
            {% for e in zabbix_agent__common_devices_discovery_exclude_names %} --exclude {{ e }}{% endfor %}
            {% for e in zabbix_agent__common_devices_discovery_exclude_patterns %} --exclude-pattern '{{ e }}'{% endfor %}
          comment: 'discovery for block devices'
        - key: common.users.password.last_change_timestamp[*]
          command: /usr/bin/passwd --status $1 2>&1 | awk '{ if (match($$3, /^[0-9-]+$/)) { print $$3 } else { print "ZBX_NOTSUPPORTED" > "/dev/stderr" } }' | date -f - +%s
          sudo_user: root
          sudo_group: root
          sudo_command: /usr/bin/passwd --status [a-zA-Z-]*
          sudo: true
          comment: return the timestamp of the last password change for the given user
      state: present
